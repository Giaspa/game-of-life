{"ast":null,"code":"export class Cell {\n  constructor(id, max) {\n    this.isAlive = false;\n    this.siblings = [];\n    this.id = id;\n    this.siblings = this.setSiblings(id, max);\n  }\n  setSiblings(id, max) {\n    /**\n     *  P_1 | P_2 | P_3\n     *  P_4 |  X  | P_5\n     *  P_6 | P_7 | P_8\n     */\n    const MAX_SQRT = Math.sqrt(max);\n    const [P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8] = [id - (MAX_SQRT + 1), id - MAX_SQRT, id - (MAX_SQRT - 1), id - 1, id + 1, id + (MAX_SQRT - 1), id + MAX_SQRT, id + (MAX_SQRT + 1)];\n    const DX_LIMIT = [];\n    const SX_LIMIT = [1];\n    let siglings = [P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8];\n    for (let i = 1; i <= max; i++) {\n      if (i % MAX_SQRT === 0) {\n        DX_LIMIT.push(i);\n        SX_LIMIT.push(i + 1);\n      }\n    }\n    if (SX_LIMIT.includes(id)) {\n      siglings = [0, P_2, P_3, 0, P_5, 0, P_7, P_8];\n    } else if (DX_LIMIT.includes(id)) {\n      siglings = [P_1, P_2, 0, P_4, 0, P_6, P_7, 0];\n    }\n    return siglings.filter(sibling => sibling > 0 && sibling < max);\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}