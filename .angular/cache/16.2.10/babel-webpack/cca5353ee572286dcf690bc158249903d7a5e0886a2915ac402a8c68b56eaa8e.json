{"ast":null,"code":"import { inject } from '@angular/core';\nimport { GridService } from './grid.service';\nimport * as i0 from \"@angular/core\";\nexport class CellService {\n  constructor() {\n    this.gridService = inject(GridService);\n  }\n  evaluateSiblingsState(cell) {\n    return cell.siblings.map(sibling => {\n      return this.gridService.getCell(sibling).isAlive;\n    });\n  }\n  getCellSurvivalRules(cell) {\n    const SIBLINGS_ALIVE = this.evaluateSiblingsState(cell).filter(sib => sib).length;\n    const CELL_ALIVE = cell.isAlive;\n    if (CELL_ALIVE && [2, 3].includes(SIBLINGS_ALIVE)) {\n      return 'alive';\n    }\n    if (!CELL_ALIVE && SIBLINGS_ALIVE === 3) {\n      return 'alive';\n    }\n    return 'death';\n  }\n  static #_ = this.ɵfac = function CellService_Factory(t) {\n    return new (t || CellService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CellService,\n    factory: CellService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["inject","GridService","CellService","constructor","gridService","evaluateSiblingsState","cell","siblings","map","sibling","getCell","isAlive","getCellSurvivalRules","SIBLINGS_ALIVE","filter","sib","length","CELL_ALIVE","includes","_","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Gianluca\\Desktop\\MyProject\\game-of-life\\src\\app\\services\\cell.service.ts"],"sourcesContent":["import { Injectable, inject } from '@angular/core';\nimport { Cell } from '../models/cell.model';\nimport { GridService } from './grid.service';\nimport { CellState } from '../components/gol-cell/gol-cell.component';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CellService {\n  gridService = inject(GridService)\n  constructor() { }\n\n  evaluateSiblingsState(cell: Cell): boolean[] {\n    return cell.siblings.map(sibling => {\n      return this.gridService.getCell(sibling).isAlive\n    })\n  }\n\n  getCellSurvivalRules(cell: Cell): CellState {\n    const SIBLINGS_ALIVE: number = this.evaluateSiblingsState(cell).filter(sib => sib).length;\n    const CELL_ALIVE: boolean = cell.isAlive;\n\n    if (CELL_ALIVE && [2, 3].includes(SIBLINGS_ALIVE)) {\n      return 'alive'\n    }\n\n    if (!CELL_ALIVE && SIBLINGS_ALIVE === 3) {\n      return 'alive'\n    }\n\n    return 'death'\n  }\n}\n"],"mappings":"AAAA,SAAqBA,MAAM,QAAQ,eAAe;AAElD,SAASC,WAAW,QAAQ,gBAAgB;;AAM5C,OAAM,MAAOC,WAAW;EAEtBC,YAAA;IADA,KAAAC,WAAW,GAAGJ,MAAM,CAACC,WAAW,CAAC;EACjB;EAEhBI,qBAAqBA,CAACC,IAAU;IAC9B,OAAOA,IAAI,CAACC,QAAQ,CAACC,GAAG,CAACC,OAAO,IAAG;MACjC,OAAO,IAAI,CAACL,WAAW,CAACM,OAAO,CAACD,OAAO,CAAC,CAACE,OAAO;IAClD,CAAC,CAAC;EACJ;EAEAC,oBAAoBA,CAACN,IAAU;IAC7B,MAAMO,cAAc,GAAW,IAAI,CAACR,qBAAqB,CAACC,IAAI,CAAC,CAACQ,MAAM,CAACC,GAAG,IAAIA,GAAG,CAAC,CAACC,MAAM;IACzF,MAAMC,UAAU,GAAYX,IAAI,CAACK,OAAO;IAExC,IAAIM,UAAU,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,CAACC,QAAQ,CAACL,cAAc,CAAC,EAAE;MACjD,OAAO,OAAO;;IAGhB,IAAI,CAACI,UAAU,IAAIJ,cAAc,KAAK,CAAC,EAAE;MACvC,OAAO,OAAO;;IAGhB,OAAO,OAAO;EAChB;EAAC,QAAAM,CAAA,G;qBAvBUjB,WAAW;EAAA;EAAA,QAAAkB,EAAA,G;WAAXlB,WAAW;IAAAmB,OAAA,EAAXnB,WAAW,CAAAoB,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}