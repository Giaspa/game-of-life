{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class GridService {\n  constructor() {\n    this.cells = [];\n  }\n  getCells() {\n    return this.cells;\n  }\n  setCells(cells) {\n    this.cells = cells;\n  }\n  getCell(idCell) {\n    return this.cells[idCell - 1];\n  }\n  resetCells() {\n    this.cells.forEach(cell => {\n      cell.isAlive = false;\n    });\n  }\n  static #_ = this.ɵfac = function GridService_Factory(t) {\n    return new (t || GridService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: GridService,\n    factory: GridService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["GridService","constructor","cells","getCells","setCells","getCell","idCell","resetCells","forEach","cell","isAlive","_","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Gianluca\\Desktop\\MyProject\\game-of-life\\src\\app\\services\\grid.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cell } from '../models/cell.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GridService {\n  private cells: Cell[] = [];\n\n  constructor() { }\n\n  getCells(): Cell[] {\n    return this.cells;\n  }\n  setCells(cells: Cell[]) {\n    this.cells = cells;\n  }\n\n  getCell(idCell: number): Cell {\n    return this.cells[idCell-1];\n  }\n\n  resetCells() {\n    this.cells.forEach(cell => {\n      cell.isAlive = false\n    })\n  }\n}\n"],"mappings":";AAMA,OAAM,MAAOA,WAAW;EAGtBC,YAAA;IAFQ,KAAAC,KAAK,GAAW,EAAE;EAEV;EAEhBC,QAAQA,CAAA;IACN,OAAO,IAAI,CAACD,KAAK;EACnB;EACAE,QAAQA,CAACF,KAAa;IACpB,IAAI,CAACA,KAAK,GAAGA,KAAK;EACpB;EAEAG,OAAOA,CAACC,MAAc;IACpB,OAAO,IAAI,CAACJ,KAAK,CAACI,MAAM,GAAC,CAAC,CAAC;EAC7B;EAEAC,UAAUA,CAAA;IACR,IAAI,CAACL,KAAK,CAACM,OAAO,CAACC,IAAI,IAAG;MACxBA,IAAI,CAACC,OAAO,GAAG,KAAK;IACtB,CAAC,CAAC;EACJ;EAAC,QAAAC,CAAA,G;qBApBUX,WAAW;EAAA;EAAA,QAAAY,EAAA,G;WAAXZ,WAAW;IAAAa,OAAA,EAAXb,WAAW,CAAAc,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}